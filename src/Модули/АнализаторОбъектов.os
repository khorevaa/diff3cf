///////////////////////////////////////////////////////////////////////////////
//
// Служебный модуль получения результата сравнения объектов основной конфы и поставки
//
// (с) BIA Technologies, LLC
//
///////////////////////////////////////////////////////////////////////////////

// Сравнивает три конфигурации - Родитель, Поставка и Расширение
//
// Параметры: 
//   РодительПуть - Строка - Каталог конфигурации Родитель
//   ПоставкаПуть - Строка - Каталог конфигурации Поставка
//   Лог - log-manager - Экземпляр класса логирования
//
// Возвращаемое значение:
//   Структура - результат сравнения
//
Функция ВыполнитьСравнениеОбъектов(РодительПуть, ПоставкаПуть, Лог) Экспорт

	РезультатОписание = Новый Структура();

	РезультатОписание.Вставить("РодительПуть", РодительПуть);
	РезультатОписание.Вставить("ПоставкаПуть", ПоставкаПуть);

	РезультатОписание.Вставить("Типы", АнализГруппОбъектов(
		"AccountingRegisters
		|AccumulationRegisters
		|CalculationRegisters
		|Catalogs
		|ChartsOfCalculationTypes
		|ChartsOfCharacteristicTypes
		|Documents
		|InformationRegisters", РезультатОписание));

	Возврат РезультатОписание;

КонецФункции

Функция АнализГруппОбъектов(ГруппыОбъектов, Описание)

	МассивРезультат = Новый Массив();
	МассивГрупп = СтрРазделить(ГруппыОбъектов, Символы.ПС);

	Для Каждого ГруппаОбъектов Из МассивГрупп Цикл

		АнализОбъектов(СокрЛП(ГруппаОбъектов), МассивРезультат, Описание);

	КонецЦикла;

	Возврат МассивРезультат;

КонецФункции

Процедура АнализОбъектов(ГруппаОбъектов, МассивРезультат, Описание)

	Файлы = ПолучитьФайлыОбъектов(ГруппаОбъектов, Описание);

	Для Каждого Файл Из Файлы Цикл

		ДанныеОбъектаПроекта = АнализФайлаОМД(Файл, Описание.РодительПуть);
		ДанныеОбъектаПоставки = Неопределено;

		ИмяФайлаПоставки = ОбъединитьПути(Описание.ПоставкаПуть, ДанныеОбъектаПроекта.ОтносительныйПуть);
		ФайлЧтение = Новый Файл(ИмяФайлаПоставки);
		Если ФайлЧтение.Существует() Тогда
			
			ДанныеОбъектаПоставки = АнализФайлаОМД(ФайлЧтение, Описание.ПоставкаПуть);

		КонецЕсли;

		// Сравнение
		Для Каждого ПолеПроекта Из ДанныеОбъектаПроекта.Поля Цикл

			Если ДанныеОбъектаПоставки <> Неопределено Тогда
				
				// поиск в поставке
				ПолеЕсть = ПоискВПоставке(ПолеПроекта, ДанныеОбъектаПоставки.Поля, МассивРезультат, ДанныеОбъектаПроекта);

				Если Не ПолеЕсть Тогда
					МассивРезультат.Добавить(
						ДанныеОбъектаПроекта.ОтносительныйПуть + " : " +
						ПолеПроекта.ИмяПоля +
						" : Удалено");
				КонецЕсли;

			Иначе

				МассивРезультат.Добавить(
					ДанныеОбъектаПроекта.ОтносительныйПуть + " : " +
					" : Удалено в поставке");

				Прервать;

			КонецЕсли;

		КонецЦикла;

	КонецЦикла;

КонецПроцедуры

Функция ПоискВПоставке(ПолеПроекта, ПоляПоставки, МассивРезультат, ДанныеОбъектаПроекта)
	Результат = Ложь;
	Для Каждого ПолеПоставки Из ПоляПоставки Цикл

		Если ПолеПроекта.ИмяПоля = ПолеПоставки.ИмяПоля Тогда

			Если ПолеПроекта.Тип <> ПолеПоставки.Тип Тогда

				МассивРезультат.Добавить(
					ДанныеОбъектаПроекта.ОтносительныйПуть + " : " +
					ПолеПроекта.ИмяПоля +
					" : Изменен тип");

			КонецЕсли;

			Результат = Истина;
			Прервать;

		КонецЕсли;

	КонецЦикла;

	Возврат Результат;

КонецФункции

Функция АнализФайлаОМД(ФайлОбъекта, ПутьПроекта)

	//////////////////////////////////////////
	ОписаниеОбъекта = Новый Структура;
	ОписаниеОбъекта.Вставить("ПолноеИмя", ФайлОбъекта.ПолноеИмя);
	ОписаниеОбъекта.Вставить("ИмяОбъекта", ФайлОбъекта.ИмяБезРасширения);
	ОписаниеОбъекта.Вставить("ОтносительныйПуть", ПолучитьОтносительныйПуть(ПутьПроекта, ФайлОбъекта.ПолноеИмя));
	//////////////////////////////////////////

	ТекстОписания = МенеджерПриложения.ПрочитатьФайл(ФайлОбъекта);

	ПаттернОсновной = "<MetaDataObject[\w\W]*?<Name>([\w\W]*?)<\/Name>[\w\W]*?(?:<TabularSection|<\/MetaDataObject>)";

	ПаттернТЧ = "<TabularSection[\w\W]*?<Name>([\w\W]*?)<\/Name>[\w\W]*?<\/TabularSection>";

	АнализОписанияОбъекта(ТекстОписания, ПаттернОсновной, "", ОписаниеОбъекта);
	АнализОписанияОбъекта(ТекстОписания, ПаттернТЧ, "ТабличнаяЧасть.", ОписаниеОбъекта);

	Возврат ОписаниеОбъекта;

КонецФункции

Процедура АнализОписанияОбъекта(ТекстОписания, Паттерн, Префикс, ОписаниеОбъекта)

	Регексп = МенеджерПриложения.ПолучитьРегексп(Паттерн);
	
	НайденныеСтроки = Регексп.НайтиСовпадения(ТекстОписания);

	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл

		АнализРеквизитов(
			НайденнаяСтрока.Группы[0].Значение, 
			ОписаниеОбъекта, 
			?(Префикс = "", "", Префикс + НайденнаяСтрока.Группы[1].Значение + "."));

	КонецЦикла;

КонецПроцедуры

Процедура АнализРеквизитов(ТекстОписания, ОписаниеОбъекта, ПрефиксПоля = "")

	СтрокаВидыПолей = "Dimension;Resource;Attribute";

	ВидыПолей = СтрРазделить(СтрокаВидыПолей, ";");

	ПаттернПоля = "<%1[\w\W]*?<Name>([\w\W]*?)<\/Name>[\w\W]*?<\/%1>";
	
	ИндексОбъекта = 0;

	Если Не ОписаниеОбъекта.Свойство("Поля") Тогда
		ОписаниеОбъекта.Вставить("Поля", Новый Массив());
	КонецЕсли;

	Для Каждого ВидПоля Из ВидыПолей Цикл

		Регексп = МенеджерПриложения.ПолучитьРегексп(СтрШаблон(ПаттернПоля, ВидПоля));
	
		НайденныеСтроки = Регексп.НайтиСовпадения(ТекстОписания);
		
		// цикл по измерениям/ресурсам/реквизитам
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл

			ОписаниеПоля = Новый Структура;
			ОписаниеПоля.Вставить("ВидПоля", ВидПоля);
			ОписаниеПоля.Вставить("ИмяПоля", ПрефиксПоля + НайденнаяСтрока.Группы[1].Значение);
			ОписаниеПоля.Вставить("ТекстОписание", НайденнаяСтрока.Группы[0].Значение);
			ОписаниеПоля.Вставить("Тип", АнализТипаПоля(ОписаниеОбъекта, ОписаниеПоля));

			ОписаниеОбъекта.Поля.Добавить(ОписаниеПоля);

		КонецЦикла;

	КонецЦикла;
	
КонецПроцедуры

Функция АнализТипаПоля(ОписаниеОбъекта, ОписаниеПоля)
	
	Результат = 0;

	ПаттернТипа = 
		"<Properties>" + 
			"[\w\W]*?<Type>([\w\W]*?)<\/Type>" + 
		"[\w\W]*?<\/Properties>";
	ПаттернСоставаТипа = 
		"(?:<v8:Type>|<v8:TypeSet>)([\w\W]*?)<\/v8:Type";

	Регексп = МенеджерПриложения.ПолучитьРегексп(ПаттернТипа);
	НайденныеСтроки = Регексп.НайтиСовпадения(ОписаниеПоля.ТекстОписание);
		
	ОписаниеТипа = "";
	Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл

		РегекспТипа = МенеджерПриложения.ПолучитьРегексп(ПаттернСоставаТипа);
	
		СтрокиСоставаТипа = РегекспТипа.НайтиСовпадения(НайденнаяСтрока.Группы[1].Значение);

		Для Каждого СтрокаСоставаТипа Из СтрокиСоставаТипа Цикл
	
			//////////////////////////////////////////
			ОписаниеТипа = ОписаниеТипа + 
				?(ОписаниеТипа = "", "", Символы.ПС) + 
				СтрокаСоставаТипа.Группы[1].Значение;
			//////////////////////////////////////////
			
		КонецЦикла;

	КонецЦикла;

	Возврат ОписаниеТипа;

КонецФункции

Функция ПолучитьФайлыОбъектов(ТипОбъектов, Описание)

	КаталогОбъектов = ОбъединитьПути(Описание.РодительПуть, ТипОбъектов);

	Возврат НайтиФайлы(КаталогОбъектов, "*.xml");

КонецФункции

Функция ПолучитьОтносительныйПуть(РасположениеПроекта, ПолноеИмяФайла)

	СоставРП = СтрРазделить(РасположениеПроекта, ПолучитьРазделительПути(), Ложь);
	СоставПуть = СтрРазделить(ПолноеИмяФайла, ПолучитьРазделительПути(), Ложь);

	Результат = "";

	Для Сч = СоставРП.Количество() По СоставПуть.ВГраница() Цикл

		Результат = ОбъединитьПути(Результат, СоставПуть[Сч]);

	КонецЦикла;

	Возврат Результат;

КонецФункции
